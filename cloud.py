# cloud.py
from sentence_transformers import SentenceTransformer, util
from settings import settings
from match_logger import log_match
from intent_classifier import predict_intent
from prompt_variants import is_paraphrase
from memory_sqlite import SQLiteMemoryManager
import logging
from datetime import datetime
import asyncio
from typing import Dict, List, Optional, Any, Tuple
from supabase import create_client, Client
import os
from dotenv import load_dotenv
import nest_asyncio
import torch
import numpy as np
import streamlit as st

# .env dosyasƒ±nƒ± y√ºkle
load_dotenv()

# Debug loglarƒ±nƒ± a√ß
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Hata mesajlarƒ±nƒ± √∂zelle≈ütir
ERRORS = {
    "input_error": "√úzg√ºn√ºm, girdiƒüiniz mesajƒ± anlayamadƒ±m. L√ºtfen daha a√ßƒ±k bir ≈üekilde ifade eder misiniz?",
    "memory_error": "Hafƒ±za i≈ülemi sƒ±rasƒ±nda bir hata olu≈ütu. L√ºtfen tekrar deneyin.",
    "learning_error": "√ñƒürenme sƒ±rasƒ±nda bir hata olu≈ütu. Ancak bu sohbetimizi etkilemeyecek.",
    "response_error": "Yanƒ±t olu≈üturulurken bir hata olu≈ütu. L√ºtfen tekrar deneyin.",
    "tts_error": "Ses d√∂n√º≈ü√ºm√º sƒ±rasƒ±nda bir hata olu≈ütu. Metin olarak devam ediyorum.",
    "stt_error": "Ses tanƒ±ma sƒ±rasƒ±nda bir hata olu≈ütu. L√ºtfen tekrar deneyin veya yazarak ilerlemeyi deneyin."
}

# Event loop sorununu √ß√∂z
try:
    loop = asyncio.get_event_loop()
except RuntimeError:
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
nest_asyncio.apply()

# Supabase baƒülantƒ±sƒ± i√ßin g√ºvenli yapƒ±landƒ±rma
supabase_url = os.getenv("SUPABASE_URL")
supabase_key = os.getenv("SUPABASE_KEY")

if not supabase_url or not supabase_key:
    raise ValueError("Supabase baƒülantƒ± bilgileri eksik. L√ºtfen .env dosyasƒ±nƒ± kontrol edin.")

class CloudAI:
    def __init__(self):
        # Supabase baƒülantƒ±sƒ±
        self.supabase = create_client(
            os.getenv("SUPABASE_URL"),
            os.getenv("SUPABASE_KEY")
        )
        logger.info("Supabase baƒülantƒ±sƒ± ba≈üarƒ±lƒ±")

        # NLP modeli y√ºkleme - PyTorch ayarlarƒ±
        device = self._get_device()
        self.model = self._load_model(device)
        
        # SQLite bellek y√∂neticisi
        self.memory_manager = SQLiteMemoryManager()
        
        # Yapƒ±landƒ±rma
        self._load_config()
        
        # Sistemleri ba≈ülat
        self._initialize_systems()

    def _get_device(self) -> str:
        """Kullanƒ±lacak cihazƒ± belirle"""
        if torch.backends.mps.is_available():
            return 'mps'
        elif torch.cuda.is_available():
            return 'cuda'
        return 'cpu'

    def _load_model(self, device: str) -> SentenceTransformer:
        """NLP modelini y√ºkle"""
        try:
            model = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2', device=device)
            logger.debug(f"Model ba≈üarƒ±yla y√ºklendi - Device: {device}")
            return model
        except Exception as e:
            logger.error(f"Model y√ºkleme hatasƒ±: {str(e)}")
            raise

    def _load_config(self):
        """Yapƒ±landƒ±rma ayarlarƒ±nƒ± y√ºkle"""
        try:
            self.context_length = int(os.getenv("MAX_CONTEXT_LENGTH", 1024))
            self.confidence_threshold = float(os.getenv("CONFIDENCE_THRESHOLD", 0.7))
            self.tts_enabled = settings.get("TTS_ENABLED", False)
            self.stt_enabled = settings.get("STT_ENABLED", False)
            
            # TTS ve STT i√ßin gerekli k√ºt√ºphaneleri kontrol et
            if self.tts_enabled:
                self._setup_tts()
            if self.stt_enabled:
                self._setup_stt()
                
        except Exception as e:
            logger.error(f"Yapƒ±landƒ±rma y√ºkleme hatasƒ±: {str(e)}")
            raise

    def _setup_tts(self):
        """TTS sistemini kur"""
        try:
            from gtts import gTTS
            import pygame
            self.gTTS = gTTS
            self.pygame = pygame
            pygame.mixer.init()
        except ImportError:
            logger.warning("TTS i√ßin gerekli k√ºt√ºphaneler y√ºkl√º deƒüil")
            self.tts_enabled = False

    def _setup_stt(self):
        """STT sistemini kur"""
        try:
            import speech_recognition as sr
            self.sr = sr
            self.recognizer = sr.Recognizer()
        except ImportError:
            logger.warning("STT i√ßin gerekli k√ºt√ºphaneler y√ºkl√º deƒüil")
            self.stt_enabled = False

    def _initialize_systems(self):
        """Alt sistemleri ba≈ülat"""
        try:
            # Ge√ßmi≈ü
            self.history = []
            self.current_topic = None
            
            # Durum y√∂netimi
            self.conversation_state = {}
            self.emotion_state = "neutral"
            
            # NLP √∂zellikleri
            self._init_nlp_features()
            
            # √ñƒürenme sistemi
            self._init_learning_system()
            
            # Duygu analizi
            self._init_emotion_system()
            
            # Konu≈üma baƒülamƒ±
            self._init_conversation_context()
            
            # Kullanƒ±cƒ± tercihleri
            self._init_user_preferences()
            
        except Exception as e:
            logger.error(f"Sistem ba≈ülatma hatasƒ±: {str(e)}")
            raise

    def _init_nlp_features(self):
        """NLP √∂zelliklerini ba≈ülat"""
        self.nlp_features = {
            "word_embeddings": {},
            "sentence_templates": [],
            "context_rules": [],
            "language_models": {},
            "semantic_networks": {},
            "grammar_patterns": {},
            "word_senses": {},
            "phrase_chunks": {},
            "dependency_trees": {},
            "coreference_chains": {}
        }

    def _init_learning_system(self):
        """√ñƒürenme sistemini ba≈ülat"""
        self.learning_system = {
            "word_patterns": {},
            "response_patterns": {},
            "topic_transitions": {},
            "user_habits": {
                "topics": {},
                "emotions": {},
                "interaction_count": 0,
                "time_patterns": {}
            },
            "learning_rate": 0.1,
            "adaptation_threshold": 0.7,
            "knowledge_base": {},
            "reinforcement": {
                "state_space": {},
                "action_space": {},
                "rewards": {},
                "policy": {},
                "value_function": {}
            },
            "transfer": {
                "source_domains": {},
                "target_domains": {},
                "mapping_rules": {}
            },
            "meta": {
                "learning_strategies": {},
                "adaptation_rules": {},
                "performance_metrics": {}
            }
        }

    def _init_emotion_system(self):
        """Duygu analizi sistemini ba≈ülat"""
        self.emotion_lexicon = {
            "neutral": {
                "words": ["nasƒ±lsƒ±n", "naber", "ne haber", "iyi misin", "merhaba", "selam"],
                "emojis": ["üòê", "üôÇ", "üëã"],
                "intensity": 0.0
            },
            "mutluluk": {
                "words": ["mutlu", "sevin√ß", "harika", "m√ºkemmel", "te≈üekk√ºr", "saƒüol"],
                "emojis": ["üòä", "üòÑ", "üòç"],
                "intensity": 1.0
            },
            "√ºz√ºnt√º": {
                "words": ["√ºzg√ºn", "k√∂t√º", "berbat", "yorgun", "bitkin"],
                "emojis": ["üòî", "üò¢", "üòû"],
                "intensity": -1.0
            }
        }
        
        self.emotion_history = {
            "current_emotion": "neutral",
            "emotion_timeline": [],
            "emotion_intensity": 0.0,
            "last_emotion_change": None,
            "emotion_triggers": {},
            "emotion_patterns": []
        }

    def _init_conversation_context(self):
        """Konu≈üma baƒülamƒ±nƒ± ba≈ülat"""
        self.conversation_context = {
            "current_topic": None,
            "previous_topics": [],
            "topic_history": [],
            "last_question": None,
            "pending_questions": [],
            "context_window": [],
            "conversation_flow": [],
            "topic_switch_count": 0,
            "last_topic_switch_time": None
        }

    def _init_user_preferences(self):
        """Kullanƒ±cƒ± tercihlerini ba≈ülat"""
        self.user_preferences = {
            "response_style": "normal",
            "language_preference": "tr",
            "favorite_topics": set(),
            "disliked_topics": set(),
            "interaction_count": 0,
            "last_interaction_time": None
        }

    def run_async(self, coro):
        """Asenkron fonksiyonlarƒ± √ßalƒ±≈ütƒ±rmak i√ßin yardƒ±mcƒ± metod"""
        try:
            return self.loop.run_until_complete(coro)
        except Exception as e:
            logger.error(f"Asenkron i≈ülem hatasƒ±: {str(e)}")
            return None

    def preprocess_text(self, text: str) -> str:
        """Metni temizler ve hazƒ±rlar"""
        try:
            if not isinstance(text, str):
                text = str(text)
            
            text = text.strip()
            if not text:
                raise ValueError("Bo≈ü metin vekt√∂rle≈ütirilemez")
                
            return text
            
        except Exception as e:
            logger.error(f"Metin √∂n i≈üleme hatasƒ±: {str(e)}")
            raise

    def encode_text(self, text: str) -> np.ndarray:
        """Metni vekt√∂re d√∂n√º≈üt√ºr√ºr"""
        try:
            # Metni temizle ve hazƒ±rla
            text = self.preprocess_text(text)
            
            # Vekt√∂r hesapla
            with torch.no_grad():
                embedding = self.model.encode(text)
                # PyTorch tens√∂r√ºn√º NumPy dizisine d√∂n√º≈üt√ºr
                if torch.is_tensor(embedding):
                    embedding = embedding.cpu().numpy()
                return embedding
                
        except Exception as e:
            logger.error(f"Metin kodlama hatasƒ±: {str(e)}")
            return None

    def is_meaningful_input(self, text: str) -> bool:
        """Giri≈üin anlamlƒ± olup olmadƒ±ƒüƒ±nƒ± kontrol et"""
        try:
            # Basit kontroller
            if not text or len(text.strip()) < 2:
                return False
                
            # Kelime sayƒ±sƒ± kontrol√º
            words = text.split()
            if len(words) < 1:
                return False
                
            return True
            
        except Exception as e:
            logger.error(f"Giri≈ü kontrol√º hatasƒ±: {str(e)}")
            return False

    async def process_message(self, message: str) -> Optional[str]:
        """Kullanƒ±cƒ± mesajƒ±nƒ± i≈üle ve yanƒ±t √ºret"""
        try:
            # Giri≈ü kontrol√º
            if not self.is_meaningful_input(message):
                return "L√ºtfen ge√ßerli bir mesaj girin."
                
            # Mesaj vekt√∂r√ºn√º hesapla
            message_embedding = self.encode_text(message)
            
            # En benzer yanƒ±tƒ± bul
            response, similarity = self.memory_manager.find_best_response(message_embedding)
            
            if response and similarity > 0.7:
                return response
            else:
                return "√úzg√ºn√ºm, bu konuda yardƒ±mcƒ± olamƒ±yorum."
                
        except Exception as e:
            logger.error(f"Mesaj i≈üleme hatasƒ±: {str(e)}")
            return None

    async def learn(self, prompt: str, response: str, intent: str = "genel") -> bool:
        """Yeni bir prompt-yanƒ±t √ßifti √∂ƒüren"""
        try:
            # Giri≈ü kontrol√º
            if not self.is_meaningful_input(prompt) or not self.is_meaningful_input(response):
                return False
                
            # Vekt√∂r hesapla
            try:
                prompt_embedding = self.encode_text(prompt)
            except Exception as e:
                logger.error(f"Vekt√∂r hesaplama hatasƒ±: {str(e)}")
                return False
                
            # Hafƒ±zaya ekle
            memory_data = {
                "prompt": prompt,
                "response": response,
                "embedding": prompt_embedding,
                "intent": intent,
                "created_at": datetime.now().isoformat()
            }
            
            try:
                memory_id = self.memory_manager.add_memory(memory_data)
                logger.info(f"Yeni bellek eklendi: {memory_id}")
                return True
            except Exception as e:
                logger.error(f"Hafƒ±za ekleme hatasƒ±: {str(e)}")
                return False
                
        except Exception as e:
            logger.error(f"√ñƒürenme hatasƒ±: {str(e)}")
            return False

    def get_training_data(self, intent: str = None, limit: int = 100) -> List[Dict[str, Any]]:
        """Eƒüitim verilerini getir"""
        try:
            return self.memory_manager.get_all_memories()
        except Exception as e:
            logger.error(f"Eƒüitim verisi getirme hatasƒ±: {str(e)}")
            return []

    def delete_training_data(self, memory_id: int) -> bool:
        """Eƒüitim verisini sil"""
        try:
            return self.memory_manager.delete_memory(memory_id)
        except Exception as e:
            logger.error(f"Eƒüitim verisi silme hatasƒ±: {str(e)}")
            return False

    async def test_connection(self) -> bool:
        """Baƒülantƒ± testi yap"""
        try:
            # Test verisi
            test_prompt = "test_connection"
            test_response = "connection_successful"
            
            # Test verisini ekle
            await self.learn(test_prompt, test_response)
            
            # Test verisini sil
            memories = self.get_training_data()
            for memory in memories:
                if memory["prompt"] == test_prompt:
                    self.delete_training_data(memory["id"])
                    
            return True
            
        except Exception as e:
            logger.error(f"Baƒülantƒ± testi hatasƒ±: {str(e)}")
            return False

    def analyze_emotion(self, text: str) -> dict:
        """Metindeki duygu durumunu analiz et"""
        try:
            # Varsayƒ±lan deƒüerler
            max_intensity = 0.0
            current_emotion = "neutral"
            
            # Giri≈ü kontrol√º
            if not isinstance(text, str) or not text.strip():
                logger.warning("Ge√ßersiz metin giri≈üi")
                return {
                    "emotion": current_emotion,
                    "intensity": max_intensity,
                    "emoji": "üòê"
                }
            
            # Kelimeleri kontrol et
            text_lower = text.lower()
            for emotion, data in self.emotion_lexicon.items():
                for word in data["words"]:
                    if word in text_lower:
                        intensity = float(data["intensity"])  # Sayƒ±sal deƒüere d√∂n√º≈üt√ºr
                        if abs(intensity) > abs(max_intensity):
                            max_intensity = intensity
                            current_emotion = emotion
            
            # Duygu ge√ßmi≈üini g√ºncelle
            try:
                self.emotion_history["current_emotion"] = current_emotion
                self.emotion_history["emotion_intensity"] = max_intensity
                self.emotion_history["emotion_timeline"].append({
                    "emotion": current_emotion,
                    "intensity": max_intensity,
                    "timestamp": datetime.now().isoformat()
                })
            except Exception as e:
                logger.error(f"Duygu ge√ßmi≈üi g√ºncelleme hatasƒ±: {str(e)}")
            
            # Sonu√ß s√∂zl√ºƒü√ºn√º olu≈ütur
            result = {
                "emotion": current_emotion,
                "intensity": float(max_intensity),  # Sayƒ±sal deƒüer olduƒüundan emin ol
                "emoji": self.emotion_lexicon[current_emotion]["emojis"][0]
            }
            
            logger.debug(f"Duygu analizi sonucu: {result}")
            return result
            
        except Exception as e:
            logger.error(f"Duygu analizi hatasƒ±: {str(e)}")
            # Hata durumunda varsayƒ±lan deƒüerleri d√∂nd√ºr
            return {
                "emotion": "neutral",
                "intensity": 0.0,
                "emoji": "üòê"
            }

    def update_context(self, message: str, intent: str = None):
        """Konu≈üma baƒülamƒ±nƒ± akƒ±llƒ± bir ≈üekilde g√ºncelle"""
        try:
            current_time = datetime.now()
            
            # Konu deƒüi≈üikliƒüi tespiti
            topic_changed = False
            if intent and self.conversation_context["current_topic"] != intent:
                topic_changed = True
                self.conversation_context["topic_switch_count"] += 1
                self.conversation_context["last_topic_switch_time"] = current_time.isoformat()
                
                # √ñnceki konuyu kaydet
                if self.conversation_context["current_topic"]:
                    self.conversation_context["previous_topics"].append({
                        "topic": self.conversation_context["current_topic"],
                        "duration": (current_time - datetime.fromisoformat(self.conversation_context["last_topic_switch_time"])).seconds,
                        "messages_count": len([m for m in self.conversation_context["context_window"] 
                                            if m["topic"] == self.conversation_context["current_topic"]]),
                        "timestamp": current_time.isoformat()
                    })
            
            # Yeni konuyu belirle
            self.conversation_context["current_topic"] = intent or "genel"
            
            # Konu ge√ßmi≈üini g√ºncelle
            self.conversation_context["topic_history"].append({
                "topic": self.conversation_context["current_topic"],
                "message": message,
                "timestamp": current_time.isoformat(),
                "topic_changed": topic_changed
            })
            
            # Baƒülam penceresini g√ºncelle
            new_context = {
                "message": message,
                "topic": self.conversation_context["current_topic"],
                "timestamp": current_time.isoformat(),
                "topic_changed": topic_changed
            }
            
            # Soru kontrol√º
            if any(q in message.lower() for q in ["?", "mi", "mƒ±", "mu", "m√º", "ne", "nasƒ±l", "neden", "kim"]):
                self.conversation_context["last_question"] = new_context
                self.conversation_context["pending_questions"].append(new_context)
            
            # Baƒülam penceresini g√ºncelle ve sƒ±nƒ±rla
            self.conversation_context["context_window"].append(new_context)
            if len(self.conversation_context["context_window"]) > 5:
                self.conversation_context["context_window"].pop(0)
                
            # Konu≈üma akƒ±≈üƒ±nƒ± analiz et
            self.conversation_context["conversation_flow"].append({
                "timestamp": current_time.isoformat(),
                "topic": self.conversation_context["current_topic"],
                "topic_changed": topic_changed,
                "message_type": "question" if "?" in message else "statement",
                "context_size": len(self.conversation_context["context_window"])
            })
            
            # Kullanƒ±cƒ± tercihlerini g√ºncelle
            if topic_changed:
                self.user_preferences["favorite_topics"].add(self.conversation_context["current_topic"])
                self.user_preferences["interaction_count"] += 1
                self.user_preferences["last_interaction_time"] = current_time.isoformat()
                
        except Exception as e:
            logger.error(f"Baƒülam g√ºncelleme hatasƒ±: {str(e)}")

    def generate_response(self, message: str, intent: str = None) -> str:
        """Mesaja uygun akƒ±llƒ± yanƒ±t olu≈ütur"""
        try:
            # Duygu analizi
            emotion_data = self.analyze_emotion(message)
            current_emotion = emotion_data["emotion"]
            emotion_intensity = emotion_data["intensity"]
            
            # Baƒülam analizi
            self.update_context(message, intent)
            context_window = self.conversation_context["context_window"]
            current_topic = self.conversation_context["current_topic"]
            
            # Kullanƒ±cƒ± tercihleri analizi
            user_style = self.user_preferences["response_style"]
            favorite_topics = self.user_preferences["favorite_topics"]
            
            # Yanƒ±t √∂nceliƒüi belirleme
            response_priority = {
                "context_match": 0.4,
                "emotion_match": 0.3,
                "intent_match": 0.2,
                "user_preference": 0.1
            }
            
            best_response = None
            max_score = 0
            
            # √ñƒürenme sisteminden yanƒ±tlarƒ± deƒüerlendir
            for pattern, response in self.learning_system["response_patterns"].items():
                score = 0
                
                # Baƒülam uyumu
                if any(c["topic"] == current_topic for c in context_window):
                    score += response_priority["context_match"]
                    
                # Duygu uyumu
                response_emotion = self.analyze_emotion(response)
                if response_emotion["emotion"] == current_emotion:
                    score += response_priority["emotion_match"]
                    
                # Intent uyumu
                if intent and intent in pattern:
                    score += response_priority["intent_match"]
                    
                # Kullanƒ±cƒ± tercihleri
                if current_topic in favorite_topics:
                    score += response_priority["user_preference"]
                    
                if score > max_score:
                    max_score = score
                    best_response = response
            
            # En iyi yanƒ±tƒ± se√ß veya yeni yanƒ±t olu≈ütur
            if best_response and max_score > 0.5:
                base_response = best_response
            else:
                # Temel yanƒ±tlarƒ± olu≈ütur
                if intent == "selamla≈üma":
                    base_response = self._generate_greeting(emotion_data)
                elif intent == "hal_hatƒ±r":
                    base_response = self._generate_wellbeing_response(emotion_data)
                elif intent == "te≈üekk√ºr":
                    base_response = self._generate_gratitude_response(emotion_data)
                else:
                    base_response = "√úzg√ºn√ºm, bu konuda yardƒ±mcƒ± olamƒ±yorum."
            
            # Yanƒ±tƒ± ki≈üiselle≈ütir
            final_response = self._personalize_response(base_response, user_style, emotion_data)
            
            # Yanƒ±tƒ± √∂ƒürenme sistemine ekle
            self.learning_system["response_patterns"][message.lower()] = final_response
            
            return final_response
            
        except Exception as e:
            logger.error(f"Yanƒ±t olu≈üturma hatasƒ±: {str(e)}")
            return ERRORS["response_error"]
        
    def _generate_greeting(self, emotion_data: dict) -> str:
        """Selamla≈üma yanƒ±tƒ± olu≈ütur"""
        if emotion_data["emotion"] == "mutluluk":
            return f"Merhaba! {emotion_data['emoji']} Harika bir g√ºn, deƒüil mi? Size nasƒ±l yardƒ±mcƒ± olabilirim?"
        elif emotion_data["emotion"] == "√ºz√ºnt√º":
            return f"Merhaba... {emotion_data['emoji']} √úzg√ºn g√∂r√ºn√ºyorsunuz, bir ≈üey mi oldu?"
        else:
            return "Merhaba! Size nasƒ±l yardƒ±mcƒ± olabilirim?"

    def _generate_wellbeing_response(self, emotion_data: dict) -> str:
        """Hal hatƒ±r yanƒ±tƒ± olu≈ütur"""
        if emotion_data["emotion"] == "mutluluk":
            return f"Ben de √ßok iyiyim! {emotion_data['emoji']} Mutluluƒüunuz bana da yansƒ±dƒ±!"
        elif emotion_data["emotion"] == "√ºz√ºnt√º":
            return f"ƒ∞yiyim, te≈üekk√ºrler. Ama sizi √ºzg√ºn g√∂rmek beni de √ºzd√º {emotion_data['emoji']} Payla≈ümak ister misiniz?"
        else:
            return "ƒ∞yiyim, te≈üekk√ºr ederim. Siz nasƒ±lsƒ±nƒ±z?"

    def _generate_gratitude_response(self, emotion_data: dict) -> str:
        """Te≈üekk√ºr yanƒ±tƒ± olu≈ütur"""
        if emotion_data["emotion"] == "mutluluk":
            return f"Rica ederim! {emotion_data['emoji']} Size yardƒ±mcƒ± olabildiƒüime √ßok sevindim!"
        else:
            return "Rica ederim! Her zaman yardƒ±mcƒ± olmaktan mutluluk duyarƒ±m."

    def _personalize_response(self, response: str, style: str, emotion_data: dict) -> str:
        """Yanƒ±tƒ± ki≈üiselle≈ütir"""
        try:
            if style == "formal":
                response = response.replace("!", ".")
                response = response.replace("merhaba", "iyi g√ºnler")
            elif style == "casual":
                response = response.replace("iyi g√ºnler", "selam")
                response = response.replace(".", "!")
            
            # Emoji ekle
            if emotion_data["intensity"] > 0.5:
                response += f" {emotion_data['emoji']}"
            
            return response
            
        except Exception as e:
            logger.error(f"Yanƒ±t ki≈üiselle≈ütirme hatasƒ±: {str(e)}")
            return response

    def sync_process_message(self, message: str) -> tuple[str, float]:
        """Mesajƒ± i≈üle ve yanƒ±t d√∂nd√ºr"""
        try:
            # Mesajƒ± √∂n i≈üle
            processed_message = self.preprocess_text(message)
            logger.debug(f"ƒ∞≈ülenmi≈ü mesaj: {processed_message}")
            
            # Embedding hesapla
            message_embedding = self.encode_text(processed_message)
            logger.debug("Embedding hesaplandƒ±")
            
            # Intent belirle
            intent = predict_intent(processed_message)
            logger.debug(f"Intent: {intent}")
            
            # Duygu analizi
            try:
                emotion_data = self.analyze_emotion(processed_message)
                logger.debug(f"Duygu analizi sonucu: {emotion_data}")
                
                if not isinstance(emotion_data, dict):
                    logger.error(f"Duygu analizi ge√ßersiz veri d√∂nd√ºrd√º: {type(emotion_data)}")
                    emotion_data = {"emotion": "neutral", "intensity": 0.0, "emoji": "üòê"}
            except Exception as e:
                logger.error(f"Duygu analizi hatasƒ±: {str(e)}")
                emotion_data = {"emotion": "neutral", "intensity": 0.0, "emoji": "üòê"}
            
            # Baƒülamƒ± g√ºncelle
            self.update_context(processed_message, intent)
            
            # Yanƒ±t olu≈ütur
            response = self.generate_response(processed_message, intent)
            logger.debug(f"Olu≈üturulan yanƒ±t: {response}")
            
            # √ñƒürenme sistemini g√ºncelle
            self.update_learning_system(processed_message, response)
            
            # Yanƒ±tƒ± hafƒ±zaya ekle
            try:
                memory_data = {
                    "prompt": processed_message,
                    "response": response,
                    "embedding": message_embedding,
                    "intent": intent,
                    "emotion": emotion_data["emotion"],
                    "created_at": datetime.now().isoformat()
                }
                
                self.memory_manager.add_memory(memory_data)
                logger.debug("Hafƒ±zaya eklendi")
            except Exception as e:
                logger.error(f"Hafƒ±za ekleme hatasƒ±: {str(e)}")
            
            # G√ºven skorunu hesapla
            try:
                intensity = emotion_data.get("intensity", 0.0)
                logger.debug(f"Duygu yoƒüunluƒüu: {intensity}, Tipi: {type(intensity)}")
                
                if intensity is None:
                    confidence = 0.0
                else:
                    confidence = float(abs(intensity))
                
                logger.debug(f"Hesaplanan g√ºven skoru: {confidence}")
            except Exception as e:
                logger.error(f"G√ºven skoru hesaplama hatasƒ±: {str(e)}")
                confidence = 0.0
            
            return response, confidence
            
        except Exception as e:
            logger.error(f"Mesaj i≈üleme hatasƒ±: {str(e)}")
            return ERRORS["response_error"], 0.0

    def update_learning_system(self, message: str, response: str, feedback: float = None):
        """√ñƒürenme sistemini g√ºncelle"""
        try:
            current_time = datetime.now()
            
            # Kelime kalƒ±plarƒ±nƒ± g√ºncelle
            words = message.lower().split()
            for word in words:
                if word not in self.learning_system["word_patterns"]:
                    self.learning_system["word_patterns"][word] = {
                        "count": 0,
                        "contexts": set(),
                        "responses": set()
                    }
                self.learning_system["word_patterns"][word]["count"] += 1
                self.learning_system["word_patterns"][word]["contexts"].add(self.conversation_context["current_topic"])
                self.learning_system["word_patterns"][word]["responses"].add(response)
            
            # Yanƒ±t kalƒ±plarƒ±nƒ± g√ºncelle
            if message.lower() not in self.learning_system["response_patterns"]:
                self.learning_system["response_patterns"][message.lower()] = response
            
            # Konu ge√ßi≈ülerini g√ºncelle
            if len(self.conversation_context["topic_history"]) > 1:
                prev_topic = self.conversation_context["topic_history"][-2]["topic"]
                curr_topic = self.conversation_context["topic_history"][-1]["topic"]
                
                if prev_topic != curr_topic:
                    transition_key = f"{prev_topic}->{curr_topic}"
                    if transition_key not in self.learning_system["topic_transitions"]:
                        self.learning_system["topic_transitions"][transition_key] = {
                            "count": 0,
                            "success_rate": 0.0,
                            "last_used": None
                        }
                    self.learning_system["topic_transitions"][transition_key]["count"] += 1
                    self.learning_system["topic_transitions"][transition_key]["last_used"] = current_time.isoformat()
            
            # Kullanƒ±cƒ± alƒ±≈ükanlƒ±klarƒ±nƒ± g√ºncelle
            topic = self.conversation_context["current_topic"]
            if topic not in self.learning_system["user_habits"]["topics"]:
                self.learning_system["user_habits"]["topics"][topic] = {
                    "count": 0,
                    "avg_duration": 0,
                    "success_rate": 0.0,
                    "last_used": None
                }
            
            self.learning_system["user_habits"]["topics"][topic]["count"] += 1
            self.learning_system["user_habits"]["topics"][topic]["last_used"] = current_time.isoformat()
            
            # Duygu durumunu g√ºncelle
            emotion = self.emotion_history["current_emotion"]
            if emotion not in self.learning_system["user_habits"]["emotions"]:
                self.learning_system["user_habits"]["emotions"][emotion] = {
                    "count": 0,
                    "triggers": set(),
                    "responses": set()
                }
            
            self.learning_system["user_habits"]["emotions"][emotion]["count"] += 1
            self.learning_system["user_habits"]["emotions"][emotion]["triggers"].add(message.lower())
            self.learning_system["user_habits"]["emotions"][emotion]["responses"].add(response)
            
            # Zaman kalƒ±plarƒ±nƒ± g√ºncelle
            hour = current_time.hour
            if hour not in self.learning_system["user_habits"]["time_patterns"]:
                self.learning_system["user_habits"]["time_patterns"][hour] = {
                    "count": 0,
                    "topics": set(),
                    "emotions": set()
                }
            
            self.learning_system["user_habits"]["time_patterns"][hour]["count"] += 1
            self.learning_system["user_habits"]["time_patterns"][hour]["topics"].add(topic)
            self.learning_system["user_habits"]["time_patterns"][hour]["emotions"].add(emotion)
            
            # Etkile≈üim sayƒ±sƒ±nƒ± g√ºncelle
            self.learning_system["user_habits"]["interaction_count"] += 1
            
            # Geri bildirim varsa ba≈üarƒ± oranlarƒ±nƒ± g√ºncelle
            if feedback is not None:
                # Konu ge√ßi≈ü ba≈üarƒ±sƒ±nƒ± g√ºncelle
                if len(self.conversation_context["topic_history"]) > 1:
                    transition_key = f"{prev_topic}->{curr_topic}"
                    current_success = self.learning_system["topic_transitions"][transition_key]["success_rate"]
                    new_success = (current_success * (self.learning_system["topic_transitions"][transition_key]["count"] - 1) + feedback) / self.learning_system["topic_transitions"][transition_key]["count"]
                    self.learning_system["topic_transitions"][transition_key]["success_rate"] = new_success
                
                # Konu ba≈üarƒ±sƒ±nƒ± g√ºncelle
                current_success = self.learning_system["user_habits"]["topics"][topic]["success_rate"]
                topic_count = self.learning_system["user_habits"]["topics"][topic]["count"]
                new_success = (current_success * (topic_count - 1) + feedback) / topic_count
                self.learning_system["user_habits"]["topics"][topic]["success_rate"] = new_success
            
            # √ñƒürenme stratejilerini g√ºncelle
            self._update_learning_strategies()
            
        except Exception as e:
            logger.error(f"√ñƒürenme sistemi g√ºncelleme hatasƒ±: {str(e)}")

    def _update_learning_strategies(self):
        """√ñƒürenme stratejilerini g√ºncelle"""
        try:
            # Ba≈üarƒ±lƒ± yanƒ±t kalƒ±plarƒ±nƒ± belirle
            successful_patterns = {}
            for topic, data in self.learning_system["user_habits"]["topics"].items():
                if data["success_rate"] > self.learning_system["adaptation_threshold"]:
                    successful_patterns[topic] = {
                        "success_rate": data["success_rate"],
                        "count": data["count"]
                    }
            
            # Ba≈üarƒ±lƒ± kalƒ±plarƒ± √∂ƒürenme stratejilerine ekle
            self.learning_system["meta"]["learning_strategies"] = successful_patterns
            
            # Adaptasyon kurallarƒ±nƒ± g√ºncelle
            self.learning_system["meta"]["adaptation_rules"] = {
                "min_success_rate": self.learning_system["adaptation_threshold"],
                "min_interaction_count": 5,
                "learning_rate": self.learning_system["learning_rate"]
            }
            
            # Performans metriklerini g√ºncelle
            total_success = sum(data["success_rate"] * data["count"] for data in self.learning_system["user_habits"]["topics"].values())
            total_count = sum(data["count"] for data in self.learning_system["user_habits"]["topics"].values())
            
            if total_count > 0:
                avg_success = total_success / total_count
            else:
                avg_success = 0.0
                
            self.learning_system["meta"]["performance_metrics"] = {
                "average_success_rate": avg_success,
                "total_interactions": total_count,
                "successful_patterns_count": len(successful_patterns)
            }
            
        except Exception as e:
            logger.error(f"√ñƒürenme stratejileri g√ºncelleme hatasƒ±: {str(e)}")

    def get_learning_stats(self) -> dict:
        """√ñƒürenme sistemi istatistiklerini getir"""
        try:
            return {
                "total_interactions": self.learning_system["user_habits"]["interaction_count"],
                "known_patterns": len(self.learning_system["word_patterns"]),
                "topic_transitions": len(self.learning_system["topic_transitions"]),
                "average_success": self.learning_system["meta"]["performance_metrics"]["average_success_rate"],
                "successful_patterns": self.learning_system["meta"]["performance_metrics"]["successful_patterns_count"]
            }
        except Exception as e:
            logger.error(f"√ñƒürenme istatistikleri getirme hatasƒ±: {str(e)}")
            return {}

    def close(self):
        """Sistemleri g√ºvenli bir ≈üekilde kapat"""
        try:
            # Veritabanƒ± baƒülantƒ±larƒ±nƒ± kapat
            if hasattr(self, 'memory_manager'):
                del self.memory_manager
                
            # PyTorch modelini temizle
            if hasattr(self, 'model'):
                del self.model
                
            # Supabase baƒülantƒ±sƒ±nƒ± kapat
            if hasattr(self, 'supabase'):
                del self.supabase
                
            logger.info("Sistem ba≈üarƒ±yla kapatƒ±ldƒ±")
            
        except Exception as e:
            logger.error(f"Sistem kapatma hatasƒ±: {str(e)}")

    def __del__(self):
        """Yƒ±kƒ±cƒ± metod"""
        self.close()

    def sync_login(self, email: str, password: str) -> bool:
        """Senkron giri≈ü i≈ülemi"""
        try:
            # Supabase auth i≈ülemi
            auth_response = self.supabase.auth.sign_in_with_password({
                "email": email,
                "password": password
            })
            
            if auth_response and hasattr(auth_response.user, 'id'):
                return True
            return False
            
        except Exception as e:
            logger.error(f"Giri≈ü hatasƒ±: {str(e)}")
            return False

    def sync_register(self, email: str, password: str) -> bool:
        """Senkron kayƒ±t i≈ülemi"""
        try:
            # Supabase auth i≈ülemi
            auth_response = self.supabase.auth.sign_up({
                "email": email,
                "password": password
            })
            
            if auth_response and hasattr(auth_response.user, 'id'):
                return True
            return False
            
        except Exception as e:
            logger.error(f"Kayƒ±t hatasƒ±: {str(e)}")
            return False

