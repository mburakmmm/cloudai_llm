-- Enable pgvector extension
create extension if not exists vector;

-- Profiles tablosu
create table profiles (
  id uuid references auth.users primary key,
  username text unique,
  email text unique,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- RLS politikaları için fonksiyon
create or replace function public.handle_new_user() 
returns trigger as $$
begin
  insert into public.profiles (id, username, email)
  values (new.id, new.raw_user_meta_data->>'username', new.email);
  return new;
end;
$$ language plpgsql security definer;

-- Yeni kullanıcı oluşturulduğunda profil oluştur
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Memories tablosu
create table memories (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  prompt text not null,
  response text not null,
  intent text,
  tags jsonb default '[]'::jsonb,
  priority integer default 1,
  usage_count integer default 0,
  context_message text,
  category text,
  embedding vector(384),
  similarity_score float,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Shared memories tablosu
create table shared_memories (
  id bigint generated by default as identity primary key,
  memory_id bigint references memories not null,
  shared_by_id uuid references auth.users not null,
  shared_with_id uuid references auth.users not null,
  can_edit boolean default false,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Match logs tablosu
create table match_logs (
  id bigint generated by default as identity primary key,
  memory_id bigint references memories not null,
  user_id uuid references auth.users not null,
  matched_input text not null,
  similarity_score float,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- RLS politikaları
alter table profiles enable row level security;
alter table memories enable row level security;
alter table shared_memories enable row level security;
alter table match_logs enable row level security;

-- Profiles için politikalar
create policy "Kullanıcılar kendi profillerini görebilir"
  on profiles for select
  using (auth.uid() = id);

create policy "Kullanıcılar kendi profillerini güncelleyebilir"
  on profiles for update
  using (auth.uid() = id);

-- Memories için politikalar
create policy "Kullanıcılar kendi hafızalarını görebilir"
  on memories for select
  using (auth.uid() = user_id);

create policy "Kullanıcılar kendi hafızalarını oluşturabilir"
  on memories for insert
  with check (auth.uid() = user_id);

create policy "Kullanıcılar kendi hafızalarını güncelleyebilir"
  on memories for update
  using (auth.uid() = user_id);

create policy "Kullanıcılar kendi hafızalarını silebilir"
  on memories for delete
  using (auth.uid() = user_id);

-- Shared memories için politikalar
create policy "Paylaşılan hafızaları görüntüleme"
  on memories for select
  using (
    exists (
      select 1 from shared_memories
      where shared_memories.memory_id = memories.id
      and shared_memories.shared_with_id = auth.uid()
    )
  );

-- Vektör arama fonksiyonu
create or replace function search_memories(
  search_query text,
  user_id uuid,
  match_threshold float default 0.5,
  match_count int default 10
) returns table (
  id bigint,
  similarity float
)
language plpgsql
as $$
begin
  return query
  select
    memories.id,
    1 - (memories.embedding <=> embedding_vector) as similarity
  from
    memories,
    get_embedding(search_query) embedding_vector
  where
    memories.user_id = user_id
    and (1 - (memories.embedding <=> embedding_vector)) > match_threshold
  order by
    memories.embedding <=> embedding_vector
  limit match_count;
end;
$$; 